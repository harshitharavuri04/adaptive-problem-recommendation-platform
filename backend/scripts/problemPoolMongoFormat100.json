[
  {
    "title": "1. Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\\n \\nExample 1:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\\n\\nExample 2:\\nInput: nums = [3,2,4], target = 6\\nOutput: [1,2]\\n\\nExample 3:\\nInput: nums = [3,3], target = 6\\nOutput: [0,1]\\n\\n \\nConstraints:\\n\\n2 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists.\\n\\n \\nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "expectedOutput": "[0,1]",
        "isHidden": false
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "expectedOutput": "[1,2]",
        "isHidden": false
      },
      {
        "input": "nums = [3,3], target = 6",
        "expectedOutput": "[0,1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]",
        "explanation": ""
      },
      {
        "input": "nums = [3,3], target = 6",
        "output": "[0,1]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "2 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists."
  },
  {
    "title": "2. Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n \\nExample 1:\\n\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [7,0,8]\\nExplanation: 342 + 465 = 807.\\n\\nExample 2:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\nExample 3:\\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\\nOutput: [8,9,9,9,0,0,0,1]\\n\\n \\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "expectedOutput": "[7,0,8]",
        "isHidden": false
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "expectedOutput": "[0]",
        "isHidden": false
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "expectedOutput": "[8,9,9,9,0,0,0,1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[7,0,8]",
        "explanation": "342 + 465 = 807."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": ""
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "output": "[8,9,9,9,0,0,0,1]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros."
  },
  {
    "title": "3. Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\\n \\nExample 1:\\nInput: s = \"abcabcbb\"\\nOutput: 3\\nExplanation: The answer is \"abc\", with the length of 3.\\n\\nExample 2:\\nInput: s = \"bbbbb\"\\nOutput: 1\\nExplanation: The answer is \"b\", with the length of 1.\\n\\nExample 3:\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n \\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces.\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "s = \"abcabcbb\"",
        "expectedOutput": "3",
        "isHidden": false
      },
      {
        "input": "s = \"bbbbb\"",
        "expectedOutput": "1",
        "isHidden": false
      },
      {
        "input": "s = \"pwwkew\"",
        "expectedOutput": "3",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is \"b\", with the length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces."
  },
  {
    "title": "4. Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\\nThe overall run time complexity should be O(log (m+n)).\\n \\nExample 1:\\nInput: nums1 = [1,3], nums2 = [2]\\nOutput: 2.00000\\nExplanation: merged array = [1,2,3] and median is 2.\\n\\nExample 2:\\nInput: nums1 = [1,2], nums2 = [3,4]\\nOutput: 2.50000\\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\\n\\n \\nConstraints:\\n\\nnums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "nums1 = [1,3], nums2 = [2]",
        "expectedOutput": "2.00000",
        "isHidden": false
      },
      {
        "input": "nums1 = [1,2], nums2 = [3,4]",
        "expectedOutput": "2.50000",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,3], nums2 = [2]",
        "output": "2.00000",
        "explanation": "merged array = [1,2,3] and median is 2."
      },
      {
        "input": "nums1 = [1,2], nums2 = [3,4]",
        "output": "2.50000",
        "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "nums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106"
  },
  {
    "title": "5. Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s.\\n \\nExample 1:\\nInput: s = \"babad\"\\nOutput: \"bab\"\\nExplanation: \"aba\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: \"bb\"\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consist of only digits and English letters.\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "s = \"babad\"",
        "expectedOutput": "\"bab\"",
        "isHidden": false
      },
      {
        "input": "s = \"cbbd\"",
        "expectedOutput": "\"bb\"",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "\"aba\" is also a valid answer."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 1000\\ns consist of only digits and English letters."
  },
  {
    "title": "6. Zigzag Conversion",
    "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\nP   A   H   N\\nA P L S I I G\\nY   I   R\\n\\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\\nWrite the code that will take a string and make this conversion given a number of rows:\\nstring convert(string s, int numRows);\\n\\n \\nExample 1:\\nInput: s = \"PAYPALISHIRING\", numRows = 3\\nOutput: \"PAHNAPLSIIGYIR\"\\n\\nExample 2:\\nInput: s = \"PAYPALISHIRING\", numRows = 4\\nOutput: \"PINALSIGYAHRPI\"\\nExplanation:\\nP     I    N\\nA   L S  I G\\nY A   H R\\nP     I\\n\\nExample 3:\\nInput: s = \"A\", numRows = 1\\nOutput: \"A\"\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), ',' and '.'.\\n1 <= numRows <= 1000\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "s = \"PAYPALISHIRING\", numRows = 3",
        "expectedOutput": "\"PAHNAPLSIIGYIR\"",
        "isHidden": false
      },
      {
        "input": "s = \"PAYPALISHIRING\", numRows = 4",
        "expectedOutput": "\"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I",
        "isHidden": false
      },
      {
        "input": "s = \"A\", numRows = 1",
        "expectedOutput": "\"A\"",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"PAYPALISHIRING\", numRows = 3",
        "output": "\"PAHNAPLSIIGYIR\"",
        "explanation": ""
      },
      {
        "input": "s = \"PAYPALISHIRING\", numRows = 4",
        "output": "\"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I",
        "explanation": ""
      },
      {
        "input": "s = \"A\", numRows = 1",
        "output": "\"A\"",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), ',' and '.'.\\n1 <= numRows <= 1000"
  },
  {
    "title": "7. Reverse Integer",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n \\nExample 1:\\nInput: x = 123\\nOutput: 321\\n\\nExample 2:\\nInput: x = -123\\nOutput: -321\\n\\nExample 3:\\nInput: x = 120\\nOutput: 21\\n\\n \\nConstraints:\\n\\n-231 <= x <= 231 - 1\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "x = 123",
        "expectedOutput": "321",
        "isHidden": false
      },
      {
        "input": "x = -123",
        "expectedOutput": "-321",
        "isHidden": false
      },
      {
        "input": "x = 120",
        "expectedOutput": "21",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321",
        "explanation": ""
      },
      {
        "input": "x = -123",
        "output": "-321",
        "explanation": ""
      },
      {
        "input": "x = 120",
        "output": "21",
        "explanation": ""
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "-231 <= x <= 231 - 1"
  },
  {
    "title": "8. String to Integer (atoi)",
    "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\\nThe algorithm for myAtoi(string s) is as follows:\\n\\nRead in and ignore any leading whitespace.\\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\\nReturn the integer as the final result.\\n\\nNote:\\n\\nOnly the space character ' ' is considered a whitespace character.\\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\\n\\n \\nExample 1:\\nInput: s = \"42\"\\nOutput: 42\\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\\nStep 1: \"42\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\\n         ^\\nStep 3: \"42\" (\"42\" is read in)\\n           ^\\nThe parsed integer is 42.\\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\\n\\nExample 2:\\nInput: s = \"   -42\"\\nOutput: -42\\nExplanation:\\nStep 1: \"   -42\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\\n             ^\\nStep 3: \"   -42\" (\"42\" is read in)\\n               ^\\nThe parsed integer is -42.\\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\\n\\nExample 3:\\nInput: s = \"4193 with words\"\\nOutput: 4193\\nExplanation:\\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\\n         ^\\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n             ^\\nThe parsed integer is 4193.\\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n\\n \\nConstraints:\\n\\n0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "s = \"42\"",
        "expectedOutput": "42",
        "isHidden": false
      },
      {
        "input": "s = \"   -42\"",
        "expectedOutput": "-42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.",
        "isHidden": false
      },
      {
        "input": "s = \"4193 with words\"",
        "expectedOutput": "4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"42\"",
        "output": "42",
        "explanation": "The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42."
      },
      {
        "input": "s = \"   -42\"",
        "output": "-42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.",
        "explanation": ""
      },
      {
        "input": "s = \"4193 with words\"",
        "output": "4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'."
  },
  {
    "title": "9. Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.\\n \\nExample 1:\\nInput: x = 121\\nOutput: true\\nExplanation: 121 reads as 121 from left to right and from right to left.\\n\\nExample 2:\\nInput: x = -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\\n\\nExample 3:\\nInput: x = 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\\n\\n \\nConstraints:\\n\\n-231 <= x <= 231 - 1\\n\\n \\nFollow up: Could you solve it without converting the integer to a string?",
    "difficulty": "easy",
    "topic": "math",
    "tags": [
      "math",
      "easy"
    ],
    "testCases": [
      {
        "input": "x = 121",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "x = -121",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "x = 10",
        "expectedOutput": "false",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "x = 121",
        "output": "true",
        "explanation": "121 reads as 121 from left to right and from right to left."
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "Reads 01 from right to left. Therefore it is not a palindrome."
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "-231 <= x <= 231 - 1"
  },
  {
    "title": "10. Regular Expression Matching",
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\\n\\n'.' Matches any single character.​​​​\\n'*' Matches zero or more of the preceding element.\\n\\nThe matching should cover the entire input string (not partial).\\n \\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"a*\"\\nOutput: true\\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\\n\\nExample 3:\\nInput: s = \"ab\", p = \".*\"\\nOutput: true\\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 20\\n1 <= p.length <= 20\\ns contains only lowercase English letters.\\np contains only lowercase English letters, '.', and '*'.\\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\\n\\n",
    "difficulty": "hard",
    "topic": "string",
    "tags": [
      "string",
      "hard"
    ],
    "testCases": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "s = \"aa\", p = \"a*\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "s = \"ab\", p = \".*\"",
        "expectedOutput": "true",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "output": "false",
        "explanation": "\"a\" does not match the entire string \"aa\"."
      },
      {
        "input": "s = \"aa\", p = \"a*\"",
        "output": "true",
        "explanation": "'*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\"."
      },
      {
        "input": "s = \"ab\", p = \".*\"",
        "output": "true",
        "explanation": "\".*\" means \"zero or more (*) of any character (.)\"."
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 20\\n1 <= p.length <= 20\\ns contains only lowercase English letters.\\np contains only lowercase English letters, '.', and '*'.\\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match."
  },
  {
    "title": "11. Container With Most Water",
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\\nReturn the maximum amount of water a container can store.\\nNotice that you may not slant the container.\\n \\nExample 1:\\n\\nInput: height = [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\\n\\nExample 2:\\nInput: height = [1,1]\\nOutput: 1\\n\\n \\nConstraints:\\n\\nn == height.length\\n2 <= n <= 105\\n0 <= height[i] <= 104\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "isHidden": false
      },
      {
        "input": "height = [1,1]",
        "expectedOutput": "1",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "n == height.length\\n2 <= n <= 105\\n0 <= height[i] <= 104"
  },
  {
    "title": "12. Integer to Roman",
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9. \\nX can be placed before L (50) and C (100) to make 40 and 90. \\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven an integer, convert it to a roman numeral.\\n \\nExample 1:\\nInput: num = 3\\nOutput: \"III\"\\nExplanation: 3 is represented as 3 ones.\\n\\nExample 2:\\nInput: num = 58\\nOutput: \"LVIII\"\\nExplanation: L = 50, V = 5, III = 3.\\n\\nExample 3:\\nInput: num = 1994\\nOutput: \"MCMXCIV\"\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n \\nConstraints:\\n\\n1 <= num <= 3999\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "num = 3",
        "expectedOutput": "\"III\"",
        "isHidden": false
      },
      {
        "input": "num = 58",
        "expectedOutput": "\"LVIII\"",
        "isHidden": false
      },
      {
        "input": "num = 1994",
        "expectedOutput": "\"MCMXCIV\"",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "\"III\"",
        "explanation": "3 is represented as 3 ones."
      },
      {
        "input": "num = 58",
        "output": "\"LVIII\"",
        "explanation": "L = 50, V = 5, III = 3."
      },
      {
        "input": "num = 1994",
        "output": "\"MCMXCIV\"",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= num <= 3999"
  },
  {
    "title": "13. Roman to Integer",
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9. \\nX can be placed before L (50) and C (100) to make 40 and 90. \\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven a roman numeral, convert it to an integer.\\n \\nExample 1:\\nInput: s = \"III\"\\nOutput: 3\\nExplanation: III = 3.\\n\\nExample 2:\\nInput: s = \"LVIII\"\\nOutput: 58\\nExplanation: L = 50, V= 5, III = 3.\\n\\nExample 3:\\nInput: s = \"MCMXCIV\"\\nOutput: 1994\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 15\\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\\n\\n",
    "difficulty": "easy",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "easy"
    ],
    "testCases": [
      {
        "input": "s = \"III\"",
        "expectedOutput": "3",
        "isHidden": false
      },
      {
        "input": "s = \"LVIII\"",
        "expectedOutput": "58",
        "isHidden": false
      },
      {
        "input": "s = \"MCMXCIV\"",
        "expectedOutput": "1994",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"III\"",
        "output": "3",
        "explanation": "III = 3."
      },
      {
        "input": "s = \"LVIII\"",
        "output": "58",
        "explanation": "L = 50, V= 5, III = 3."
      },
      {
        "input": "s = \"MCMXCIV\"",
        "output": "1994",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= s.length <= 15\\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999]."
  },
  {
    "title": "14. Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings.\\nIf there is no common prefix, return an empty string \"\".\\n \\nExample 1:\\nInput: strs = [\"flower\",\"flow\",\"flight\"]\\nOutput: \"fl\"\\n\\nExample 2:\\nInput: strs = [\"dog\",\"racecar\",\"car\"]\\nOutput: \"\"\\nExplanation: There is no common prefix among the input strings.\\n\\n \\nConstraints:\\n\\n1 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lowercase English letters.\\n\\n",
    "difficulty": "easy",
    "topic": "string",
    "tags": [
      "string",
      "easy"
    ],
    "testCases": [
      {
        "input": "strs = [\"flower\",\"flow\",\"flight\"]",
        "expectedOutput": "\"fl\"",
        "isHidden": false
      },
      {
        "input": "strs = [\"dog\",\"racecar\",\"car\"]",
        "expectedOutput": "\"\"",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "strs = [\"flower\",\"flow\",\"flight\"]",
        "output": "\"fl\"",
        "explanation": ""
      },
      {
        "input": "strs = [\"dog\",\"racecar\",\"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the input strings."
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lowercase English letters."
  },
  {
    "title": "15. 3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\\nNotice that the solution set must not contain duplicate triplets.\\n \\nExample 1:\\nInput: nums = [-1,0,1,2,-1,-4]\\nOutput: [[-1,-1,2],[-1,0,1]]\\nExplanation: \\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\\nNotice that the order of the output and the order of the triplets does not matter.\\n\\nExample 2:\\nInput: nums = [0,1,1]\\nOutput: []\\nExplanation: The only possible triplet does not sum up to 0.\\n\\nExample 3:\\nInput: nums = [0,0,0]\\nOutput: [[0,0,0]]\\nExplanation: The only possible triplet sums up to 0.\\n\\n \\nConstraints:\\n\\n3 <= nums.length <= 3000\\n-105 <= nums[i] <= 105\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [-1,0,1,2,-1,-4]",
        "expectedOutput": "[[-1,-1,2],[-1,0,1]]",
        "isHidden": false
      },
      {
        "input": "nums = [0,1,1]",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "nums = [0,0,0]",
        "expectedOutput": "[[0,0,0]]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [-1,0,1,2,-1,-4]",
        "output": "[[-1,-1,2],[-1,0,1]]",
        "explanation": "nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter."
      },
      {
        "input": "nums = [0,1,1]",
        "output": "[]",
        "explanation": "The only possible triplet does not sum up to 0."
      },
      {
        "input": "nums = [0,0,0]",
        "output": "[[0,0,0]]",
        "explanation": "The only possible triplet sums up to 0."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "3 <= nums.length <= 3000\\n-105 <= nums[i] <= 105"
  },
  {
    "title": "16. 3Sum Closest",
    "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\\nReturn the sum of the three integers.\\nYou may assume that each input would have exactly one solution.\\n \\nExample 1:\\nInput: nums = [-1,2,1,-4], target = 1\\nOutput: 2\\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n\\nExample 2:\\nInput: nums = [0,0,0], target = 1\\nOutput: 0\\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\\n\\n \\nConstraints:\\n\\n3 <= nums.length <= 500\\n-1000 <= nums[i] <= 1000\\n-104 <= target <= 104\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [-1,2,1,-4], target = 1",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "nums = [0,0,0], target = 1",
        "expectedOutput": "0",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [-1,2,1,-4], target = 1",
        "output": "2",
        "explanation": "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
      },
      {
        "input": "nums = [0,0,0], target = 1",
        "output": "0",
        "explanation": "The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "3 <= nums.length <= 500\\n-1000 <= nums[i] <= 1000\\n-104 <= target <= 104"
  },
  {
    "title": "17. Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n\\n \\nExample 1:\\nInput: digits = \"23\"\\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\\n\\nExample 2:\\nInput: digits = \"\"\\nOutput: []\\n\\nExample 3:\\nInput: digits = \"2\"\\nOutput: [\"a\",\"b\",\"c\"]\\n\\n \\nConstraints:\\n\\n0 <= digits.length <= 4\\ndigits[i] is a digit in the range ['2', '9'].\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "digits = \"23\"",
        "expectedOutput": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
        "isHidden": false
      },
      {
        "input": "digits = \"\"",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "digits = \"2\"",
        "expectedOutput": "[\"a\",\"b\",\"c\"]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "digits = \"23\"",
        "output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
        "explanation": ""
      },
      {
        "input": "digits = \"\"",
        "output": "[]",
        "explanation": ""
      },
      {
        "input": "digits = \"2\"",
        "output": "[\"a\",\"b\",\"c\"]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= digits.length <= 4\\ndigits[i] is a digit in the range ['2', '9']."
  },
  {
    "title": "18. 4Sum",
    "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\\n\\n0 <= a, b, c, d < n\\na, b, c, and d are distinct.\\nnums[a] + nums[b] + nums[c] + nums[d] == target\\n\\nYou may return the answer in any order.\\n \\nExample 1:\\nInput: nums = [1,0,-1,0,-2,2], target = 0\\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2], target = 8\\nOutput: [[2,2,2,2]]\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,0,-1,0,-2,2], target = 0",
        "expectedOutput": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
        "isHidden": false
      },
      {
        "input": "nums = [2,2,2,2,2], target = 8",
        "expectedOutput": "[[2,2,2,2]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [1,0,-1,0,-2,2], target = 0",
        "output": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
        "explanation": ""
      },
      {
        "input": "nums = [2,2,2,2,2], target = 8",
        "output": "[[2,2,2,2]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109"
  },
  {
    "title": "19. Remove Nth Node From End of List",
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\\n \\nExample 1:\\n\\nInput: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\n\\nExample 2:\\nInput: head = [1], n = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [1,2], n = 1\\nOutput: [1]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz\\n\\n \\nFollow up: Could you do this in one pass?\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "head = [1,2,3,4,5], n = 2",
        "expectedOutput": "[1,2,3,5]",
        "isHidden": false
      },
      {
        "input": "head = [1], n = 1",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "head = [1,2], n = 1",
        "expectedOutput": "[1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], n = 2",
        "output": "[1,2,3,5]",
        "explanation": ""
      },
      {
        "input": "head = [1], n = 1",
        "output": "[]",
        "explanation": ""
      },
      {
        "input": "head = [1,2], n = 1",
        "output": "[1]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz"
  },
  {
    "title": "20. Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\\nAn input string is valid if:\\n\\nOpen brackets must be closed by the same type of brackets.\\nOpen brackets must be closed in the correct order.\\nEvery close bracket has a corresponding open bracket of the same type.\\n\\n \\nExample 1:\\nInput: s = \"()\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"()[]{}\"\\nOutput: true\\n\\nExample 3:\\nInput: s = \"(]\"\\nOutput: false\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of parentheses only '()[]{}'.\\n\\n",
    "difficulty": "easy",
    "topic": "string",
    "tags": [
      "string",
      "easy"
    ],
    "testCases": [
      {
        "input": "s = \"()\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "s = \"()[]{}\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "s = \"(]\"",
        "expectedOutput": "false",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s = \"()[]{}\"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s = \"(]\"",
        "output": "false",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= s.length <= 104\\ns consists of parentheses only '()[]{}'."
  },
  {
    "title": "21. Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists list1 and list2.\\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\\nReturn the head of the merged linked list.\\n \\nExample 1:\\n\\nInput: list1 = [1,2,4], list2 = [1,3,4]\\nOutput: [1,1,2,3,4,4]\\n\\nExample 2:\\nInput: list1 = [], list2 = []\\nOutput: []\\n\\nExample 3:\\nInput: list1 = [], list2 = [0]\\nOutput: [0]\\n\\n \\nConstraints:\\n\\nThe number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth list1 and list2 are sorted in non-decreasing order.\\n\\n",
    "difficulty": "easy",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "easy"
    ],
    "testCases": [
      {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "isHidden": false
      },
      {
        "input": "list1 = [], list2 = []",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "list1 = [], list2 = [0]",
        "expectedOutput": "[0]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]",
        "explanation": ""
      },
      {
        "input": "list1 = [], list2 = []",
        "output": "[]",
        "explanation": ""
      },
      {
        "input": "list1 = [], list2 = [0]",
        "output": "[0]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "The number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth list1 and list2 are sorted in non-decreasing order."
  },
  {
    "title": "22. Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\\n \\nExample 1:\\nInput: n = 3\\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\\nExample 2:\\nInput: n = 1\\nOutput: [\"()\"]\\n\\n \\nConstraints:\\n\\n1 <= n <= 8\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 3",
        "expectedOutput": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "[\"()\"]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 8"
  },
  {
    "title": "23. Merge k Sorted Lists",
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\\nMerge all the linked-lists into one sorted linked-list and return it.\\n \\nExample 1:\\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\\nOutput: [1,1,2,3,4,4,5,6]\\nExplanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6\\n\\nExample 2:\\nInput: lists = []\\nOutput: []\\n\\nExample 3:\\nInput: lists = [[]]\\nOutput: []\\n\\n \\nConstraints:\\n\\nk == lists.length\\n0 <= k <= 104\\n0 <= lists[i].length <= 500\\n-104 <= lists[i][j] <= 104\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length will not exceed 104.\\n\\n",
    "difficulty": "hard",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "hard"
    ],
    "testCases": [
      {
        "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
        "expectedOutput": "[1,1,2,3,4,4,5,6]",
        "isHidden": false
      },
      {
        "input": "lists = []",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "lists = [[]]",
        "expectedOutput": "[]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
        "output": "[1,1,2,3,4,4,5,6]",
        "explanation": "The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6"
      },
      {
        "input": "lists = []",
        "output": "[]",
        "explanation": ""
      },
      {
        "input": "lists = [[]]",
        "output": "[]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "k == lists.length\\n0 <= k <= 104\\n0 <= lists[i].length <= 500\\n-104 <= lists[i][j] <= 104\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length will not exceed 104."
  },
  {
    "title": "24. Swap Nodes in Pairs",
    "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\\n \\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [2,1,4,3]\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\nExample 3:\\nInput: head = [1]\\nOutput: [1]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 100].\\n0 <= Node.val <= 100\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "head = [1,2,3,4]",
        "expectedOutput": "[2,1,4,3]",
        "isHidden": false
      },
      {
        "input": "head = []",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "head = [1]",
        "expectedOutput": "[1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4]",
        "output": "[2,1,4,3]",
        "explanation": ""
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": ""
      },
      {
        "input": "head = [1]",
        "output": "[1]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is in the range [0, 100].\\n0 <= Node.val <= 100"
  },
  {
    "title": "25. Reverse Nodes in k-Group",
    "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\\n \\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [2,1,4,3,5]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5], k = 3\\nOutput: [3,2,1,4,5]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= k <= n <= 5000\\n0 <= Node.val <= 1000\\n\\n \\nFollow-up: Can you solve the problem in O(1) extra memory space?\\n",
    "difficulty": "hard",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "hard"
    ],
    "testCases": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "expectedOutput": "[2,1,4,3,5]",
        "isHidden": false
      },
      {
        "input": "head = [1,2,3,4,5], k = 3",
        "expectedOutput": "[3,2,1,4,5]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[2,1,4,3,5]",
        "explanation": ""
      },
      {
        "input": "head = [1,2,3,4,5], k = 3",
        "output": "[3,2,1,4,5]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is n.\\n1 <= k <= n <= 5000\\n0 <= Node.val <= 1000"
  },
  {
    "title": "26. Remove Duplicates from Sorted Array",
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\\n\\nChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\\nReturn k.\\n\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n \\nExample 1:\\nInput: nums = [1,1,2]\\nOutput: 2, nums = [1,2,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\nnums is sorted in non-decreasing order.\\n\\n",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "nums = [1,1,2]",
        "expectedOutput": "2, nums = [1,2,_]",
        "isHidden": false
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "expectedOutput": "5, nums = [0,1,2,3,4,_,_,_,_,_]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2]",
        "output": "2, nums = [1,2,_]",
        "explanation": "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "output": "5, nums = [0,1,2,3,4,_,_,_,_,_]",
        "explanation": "Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\nnums is sorted in non-decreasing order."
  },
  {
    "title": "27. Remove Element",
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\\n\\nChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\\nReturn k.\\n\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint val = ...; // Value to remove\\nint[] expectedNums = [...]; // The expected answer with correct length.\\n                            // It is sorted with no values equaling val.\\n\\nint k = removeElement(nums, val); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nsort(nums, 0, k); // Sort the first k elements of nums\\nfor (int i = 0; i < actualLength; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n \\nExample 1:\\nInput: nums = [3,2,2,3], val = 3\\nOutput: 2, nums = [2,2,_,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\\nNote that the five elements can be returned in any order.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n \\nConstraints:\\n\\n0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100\\n\\n",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "nums = [3,2,2,3], val = 3",
        "expectedOutput": "2, nums = [2,2,_,_]",
        "isHidden": false
      },
      {
        "input": "nums = [0,1,2,2,3,0,4,2], val = 2",
        "expectedOutput": "5, nums = [0,1,4,0,3,_,_,_]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [3,2,2,3], val = 3",
        "output": "2, nums = [2,2,_,_]",
        "explanation": "Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
      },
      {
        "input": "nums = [0,1,2,2,3,0,4,2], val = 2",
        "output": "5, nums = [0,1,4,0,3,_,_,_]",
        "explanation": "Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100"
  },
  {
    "title": "28. Find the Index of the First Occurrence in a String",
    "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\\n \\nExample 1:\\nInput: haystack = \"sadbutsad\", needle = \"sad\"\\nOutput: 0\\nExplanation: \"sad\" occurs at index 0 and 6.\\nThe first occurrence is at index 0, so we return 0.\\n\\nExample 2:\\nInput: haystack = \"leetcode\", needle = \"leeto\"\\nOutput: -1\\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\\n\\n \\nConstraints:\\n\\n1 <= haystack.length, needle.length <= 104\\nhaystack and needle consist of only lowercase English characters.\\n\\n",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "haystack = \"sadbutsad\", needle = \"sad\"",
        "expectedOutput": "0",
        "isHidden": false
      },
      {
        "input": "haystack = \"leetcode\", needle = \"leeto\"",
        "expectedOutput": "-1",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "haystack = \"sadbutsad\", needle = \"sad\"",
        "output": "0",
        "explanation": "\"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0."
      },
      {
        "input": "haystack = \"leetcode\", needle = \"leeto\"",
        "output": "-1",
        "explanation": "\"leeto\" did not occur in \"leetcode\", so we return -1."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= haystack.length, needle.length <= 104\\nhaystack and needle consist of only lowercase English characters."
  },
  {
    "title": "29. Divide Two Integers",
    "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\\nReturn the quotient after dividing dividend by divisor.\\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\\n \\nExample 1:\\nInput: dividend = 10, divisor = 3\\nOutput: 3\\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\\n\\nExample 2:\\nInput: dividend = 7, divisor = -3\\nOutput: -2\\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\\n\\n \\nConstraints:\\n\\n-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "dividend = 10, divisor = 3",
        "expectedOutput": "3",
        "isHidden": false
      },
      {
        "input": "dividend = 7, divisor = -3",
        "expectedOutput": "-2",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "dividend = 10, divisor = 3",
        "output": "3",
        "explanation": "10/3 = 3.33333.. which is truncated to 3."
      },
      {
        "input": "dividend = 7, divisor = -3",
        "output": "-2",
        "explanation": "7/-3 = -2.33333.. which is truncated to -2."
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0"
  },
  {
    "title": "30. Substring with Concatenation of All Words",
    "description": "You are given a string s and an array of strings words. All the strings of words are of the same length.\\nA concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\\n\\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\\n\\nReturn the starting indices of all the concatenated substrings in s. You can return the answer in any order.\\n \\nExample 1:\\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\\nOutput: [0,9]\\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\\nThe output order does not matter. Returning [9,0] is fine too.\\n\\nExample 2:\\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\\nOutput: []\\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\\nWe return an empty array.\\n\\nExample 3:\\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\\nOutput: [6,9,12]\\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 104\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\ns and words[i] consist of lowercase English letters.\\n\\n",
    "difficulty": "hard",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "hard"
    ],
    "testCases": [
      {
        "input": "s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
        "expectedOutput": "[0,9]",
        "isHidden": false
      },
      {
        "input": "s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
        "expectedOutput": "[6,9,12]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
        "output": "[0,9]",
        "explanation": "Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too."
      },
      {
        "input": "s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
        "output": "[]",
        "explanation": "Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array."
      },
      {
        "input": "s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
        "output": "[6,9,12]",
        "explanation": "Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 104\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\ns and words[i] consist of lowercase English letters."
  },
  {
    "title": "31. Next Permutation",
    "description": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\\n\\nFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\\n\\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\\n\\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\\n\\nGiven an array of integers nums, find the next permutation of nums.\\nThe replacement must be in place and use only constant extra memory.\\n \\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: nums = [3,2,1]\\nOutput: [1,2,3]\\n\\nExample 3:\\nInput: nums = [1,1,5]\\nOutput: [1,5,1]\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 100\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,2,3]",
        "expectedOutput": "[1,3,2]",
        "isHidden": false
      },
      {
        "input": "nums = [3,2,1]",
        "expectedOutput": "[1,2,3]",
        "isHidden": false
      },
      {
        "input": "nums = [1,1,5]",
        "expectedOutput": "[1,5,1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[1,3,2]",
        "explanation": ""
      },
      {
        "input": "nums = [3,2,1]",
        "output": "[1,2,3]",
        "explanation": ""
      },
      {
        "input": "nums = [1,1,5]",
        "output": "[1,5,1]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 100\\n0 <= nums[i] <= 100"
  },
  {
    "title": "32. Longest Valid Parentheses",
    "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\\n \\nExample 1:\\nInput: s = \"(()\"\\nOutput: 2\\nExplanation: The longest valid parentheses substring is \"()\".\\n\\nExample 2:\\nInput: s = \")()())\"\\nOutput: 4\\nExplanation: The longest valid parentheses substring is \"()()\".\\n\\nExample 3:\\nInput: s = \"\"\\nOutput: 0\\n\\n \\nConstraints:\\n\\n0 <= s.length <= 3 * 104\\ns[i] is '(', or ')'.\\n\\n",
    "difficulty": "hard",
    "topic": "string",
    "tags": [
      "string",
      "hard"
    ],
    "testCases": [
      {
        "input": "s = \"(()\"",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "s = \")()())\"",
        "expectedOutput": "4",
        "isHidden": false
      },
      {
        "input": "s = \"\"",
        "expectedOutput": "0",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"(()\"",
        "output": "2",
        "explanation": "The longest valid parentheses substring is \"()\"."
      },
      {
        "input": "s = \")()())\"",
        "output": "4",
        "explanation": "The longest valid parentheses substring is \"()()\"."
      },
      {
        "input": "s = \"\"",
        "output": "0",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= s.length <= 3 * 104\\ns[i] is '(', or ')'."
  },
  {
    "title": "33. Search in Rotated Sorted Array",
    "description": "There is an integer array nums sorted in ascending order (with distinct values).\\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\\nYou must write an algorithm with O(log n) runtime complexity.\\n \\nExample 1:\\nInput: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\nExample 3:\\nInput: nums = [1], target = 0\\nOutput: -1\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is an ascending array that is possibly rotated.\\n-104 <= target <= 104\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "expectedOutput": "4",
        "isHidden": false
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "expectedOutput": "-1",
        "isHidden": false
      },
      {
        "input": "nums = [1], target = 0",
        "expectedOutput": "-1",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": ""
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": ""
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is an ascending array that is possibly rotated.\\n-104 <= target <= 104"
  },
  {
    "title": "34. Find First and Last Position of Element in Sorted Array",
    "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\\nIf target is not found in the array, return [-1, -1].\\nYou must write an algorithm with O(log n) runtime complexity.\\n \\nExample 1:\\nInput: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\nExample 2:\\nInput: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\nExample 3:\\nInput: nums = [], target = 0\\nOutput: [-1,-1]\\n\\n \\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\nnums is a non-decreasing array.\\n-109 <= target <= 109\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [5,7,7,8,8,10], target = 8",
        "expectedOutput": "[3,4]",
        "isHidden": false
      },
      {
        "input": "nums = [5,7,7,8,8,10], target = 6",
        "expectedOutput": "[-1,-1]",
        "isHidden": false
      },
      {
        "input": "nums = [], target = 0",
        "expectedOutput": "[-1,-1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [5,7,7,8,8,10], target = 8",
        "output": "[3,4]",
        "explanation": ""
      },
      {
        "input": "nums = [5,7,7,8,8,10], target = 6",
        "output": "[-1,-1]",
        "explanation": ""
      },
      {
        "input": "nums = [], target = 0",
        "output": "[-1,-1]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\nnums is a non-decreasing array.\\n-109 <= target <= 109"
  },
  {
    "title": "35. Search Insert Position",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\\nYou must write an algorithm with O(log n) runtime complexity.\\n \\nExample 1:\\nInput: nums = [1,3,5,6], target = 5\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [1,3,5,6], target = 2\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [1,3,5,6], target = 7\\nOutput: 4\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104\\n\\n",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "nums = [1,3,5,6], target = 5",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "nums = [1,3,5,6], target = 2",
        "expectedOutput": "1",
        "isHidden": false
      },
      {
        "input": "nums = [1,3,5,6], target = 7",
        "expectedOutput": "4",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [1,3,5,6], target = 5",
        "output": "2",
        "explanation": ""
      },
      {
        "input": "nums = [1,3,5,6], target = 2",
        "output": "1",
        "explanation": ""
      },
      {
        "input": "nums = [1,3,5,6], target = 7",
        "output": "4",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104"
  },
  {
    "title": "36. Valid Sudoku",
    "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\\n\\nEach row must contain the digits 1-9 without repetition.\\nEach column must contain the digits 1-9 without repetition.\\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\\n\\nNote:\\n\\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\\nOnly the filled cells need to be validated according to the mentioned rules.\\n\\n \\nExample 1:\\n\\nInput: board = \\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: true\\n\\nExample 2:\\nInput: board = \\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\\n\\n \\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit 1-9 or '.'.\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "expectedOutput": "false",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "output": "false",
        "explanation": "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "board.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit 1-9 or '.'."
  },
  {
    "title": "37. Sudoku Solver",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\\nA sudoku solution must satisfy all of the following rules:\\n\\nEach of the digits 1-9 must occur exactly once in each row.\\nEach of the digits 1-9 must occur exactly once in each column.\\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\\n\\nThe '.' character indicates empty cells.\\n \\nExample 1:\\n\\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\\nExplanation: The input board is shown above and the only valid solution is shown below:\\n\\n\\n\\n \\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or '.'.\\nIt is guaranteed that the input board has only one solution.\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "expectedOutput": "[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "output": "[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "board.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or '.'.\\nIt is guaranteed that the input board has only one solution."
  },
  {
    "title": "38. Count and Say",
    "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\\n\\ncountAndSay(1) = \"1\"\\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\\n\\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\\nFor example, the saying and conversion for digit string \"3322251\":\\n\\nGiven a positive integer n, return the nth term of the count-and-say sequence.\\n \\nExample 1:\\nInput: n = 1\\nOutput: \"1\"\\nExplanation: This is the base case.\\n\\nExample 2:\\nInput: n = 4\\nOutput: \"1211\"\\nExplanation:\\ncountAndSay(1) = \"1\"\\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\\n\\n \\nConstraints:\\n\\n1 <= n <= 30\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 1",
        "expectedOutput": "\"1\"",
        "isHidden": false
      },
      {
        "input": "n = 4",
        "expectedOutput": "\"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "\"1\"",
        "explanation": "This is the base case."
      },
      {
        "input": "n = 4",
        "output": "\"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 30"
  },
  {
    "title": "39. Combination Sum",
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\\n \\nExample 1:\\nInput: candidates = [2,3,6,7], target = 7\\nOutput: [[2,2,3],[7]]\\nExplanation:\\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.\\n\\nExample 2:\\nInput: candidates = [2,3,5], target = 8\\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\\n\\nExample 3:\\nInput: candidates = [2], target = 1\\nOutput: []\\n\\n \\nConstraints:\\n\\n1 <= candidates.length <= 30\\n2 <= candidates[i] <= 40\\nAll elements of candidates are distinct.\\n1 <= target <= 40\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "candidates = [2,3,6,7], target = 7",
        "expectedOutput": "[[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.",
        "isHidden": false
      },
      {
        "input": "candidates = [2,3,5], target = 8",
        "expectedOutput": "[[2,2,2,2],[2,3,3],[3,5]]",
        "isHidden": false
      },
      {
        "input": "candidates = [2], target = 1",
        "expectedOutput": "[]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "candidates = [2,3,6,7], target = 7",
        "output": "[[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.",
        "explanation": ""
      },
      {
        "input": "candidates = [2,3,5], target = 8",
        "output": "[[2,2,2,2],[2,3,3],[3,5]]",
        "explanation": ""
      },
      {
        "input": "candidates = [2], target = 1",
        "output": "[]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= candidates.length <= 30\\n2 <= candidates[i] <= 40\\nAll elements of candidates are distinct.\\n1 <= target <= 40"
  },
  {
    "title": "40. Combination Sum II",
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\\nEach number in candidates may only be used once in the combination.\\nNote: The solution set must not contain duplicate combinations.\\n \\nExample 1:\\nInput: candidates = [10,1,2,7,6,1,5], target = 8\\nOutput: \\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]\\n\\nExample 2:\\nInput: candidates = [2,5,2,1,2], target = 5\\nOutput: \\n[\\n[1,2,2],\\n[5]\\n]\\n\\n \\nConstraints:\\n\\n1 <= candidates.length <= 100\\n1 <= candidates[i] <= 50\\n1 <= target <= 30\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "candidates = [10,1,2,7,6,1,5], target = 8",
        "expectedOutput": "[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]",
        "isHidden": false
      },
      {
        "input": "candidates = [2,5,2,1,2], target = 5",
        "expectedOutput": "[\n[1,2,2],\n[5]\n]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "candidates = [10,1,2,7,6,1,5], target = 8",
        "output": "[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]",
        "explanation": ""
      },
      {
        "input": "candidates = [2,5,2,1,2], target = 5",
        "output": "[\n[1,2,2],\n[5]\n]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= candidates.length <= 100\\n1 <= candidates[i] <= 50\\n1 <= target <= 30"
  },
  {
    "title": "41. First Missing Positive",
    "description": "Given an unsorted integer array nums, return the smallest missing positive integer.\\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\\n \\nExample 1:\\nInput: nums = [1,2,0]\\nOutput: 3\\nExplanation: The numbers in the range [1,2] are all in the array.\\n\\nExample 2:\\nInput: nums = [3,4,-1,1]\\nOutput: 2\\nExplanation: 1 is in the array but 2 is missing.\\n\\nExample 3:\\nInput: nums = [7,8,9,11,12]\\nOutput: 1\\nExplanation: The smallest positive integer 1 is missing.\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "nums = [1,2,0]",
        "expectedOutput": "3",
        "isHidden": false
      },
      {
        "input": "nums = [3,4,-1,1]",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "nums = [7,8,9,11,12]",
        "expectedOutput": "1",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,0]",
        "output": "3",
        "explanation": "The numbers in the range [1,2] are all in the array."
      },
      {
        "input": "nums = [3,4,-1,1]",
        "output": "2",
        "explanation": "1 is in the array but 2 is missing."
      },
      {
        "input": "nums = [7,8,9,11,12]",
        "output": "1",
        "explanation": "The smallest positive integer 1 is missing."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1"
  },
  {
    "title": "42. Trapping Rain Water",
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\\n \\nExample 1:\\n\\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\\n\\nExample 2:\\nInput: height = [4,2,0,3,2,5]\\nOutput: 9\\n\\n \\nConstraints:\\n\\nn == height.length\\n1 <= n <= 2 * 104\\n0 <= height[i] <= 105\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "expectedOutput": "6",
        "isHidden": false
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "expectedOutput": "9",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "n == height.length\\n1 <= n <= 2 * 104\\n0 <= height[i] <= 105"
  },
  {
    "title": "43. Multiply Strings",
    "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\\n \\nExample 1:\\nInput: num1 = \"2\", num2 = \"3\"\\nOutput: \"6\"\\nExample 2:\\nInput: num1 = \"123\", num2 = \"456\"\\nOutput: \"56088\"\\n\\n \\nConstraints:\\n\\n1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "num1 = \"2\", num2 = \"3\"",
        "expectedOutput": "\"6\"",
        "isHidden": false
      },
      {
        "input": "num1 = \"123\", num2 = \"456\"",
        "expectedOutput": "\"56088\"",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "num1 = \"2\", num2 = \"3\"",
        "output": "\"6\"",
        "explanation": ""
      },
      {
        "input": "num1 = \"123\", num2 = \"456\"",
        "output": "\"56088\"",
        "explanation": ""
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself."
  },
  {
    "title": "44. Wildcard Matching",
    "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\\n\\n'?' Matches any single character.\\n'*' Matches any sequence of characters (including the empty sequence).\\n\\nThe matching should cover the entire input string (not partial).\\n \\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"*\"\\nOutput: true\\nExplanation: '*' matches any sequence.\\n\\nExample 3:\\nInput: s = \"cb\", p = \"?a\"\\nOutput: false\\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\\n\\n \\nConstraints:\\n\\n0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, '?' or '*'.\\n\\n",
    "difficulty": "hard",
    "topic": "string",
    "tags": [
      "string",
      "hard"
    ],
    "testCases": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "s = \"aa\", p = \"*\"",
        "expectedOutput": "true\nExplanation: '*' matches any sequence.",
        "isHidden": false
      },
      {
        "input": "s = \"cb\", p = \"?a\"",
        "expectedOutput": "false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "output": "false",
        "explanation": "\"a\" does not match the entire string \"aa\"."
      },
      {
        "input": "s = \"aa\", p = \"*\"",
        "output": "true\nExplanation: '*' matches any sequence.",
        "explanation": ""
      },
      {
        "input": "s = \"cb\", p = \"?a\"",
        "output": "false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, '?' or '*'."
  },
  {
    "title": "45. Jump Game II",
    "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\\n\\n0 <= j <= nums[i] and\\ni + j < n\\n\\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\\n \\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [2,3,0,1,4]\\nOutput: 2\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 1000\\nIt's guaranteed that you can reach nums[n - 1].\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [2,3,1,1,4]",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "nums = [2,3,0,1,4]",
        "expectedOutput": "2",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,1,1,4]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = [2,3,0,1,4]",
        "output": "2",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 104\\n0 <= nums[i] <= 1000\\nIt's guaranteed that you can reach nums[n - 1]."
  },
  {
    "title": "46. Permutations",
    "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\\n \\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\nExample 2:\\nInput: nums = [0,1]\\nOutput: [[0,1],[1,0]]\\nExample 3:\\nInput: nums = [1]\\nOutput: [[1]]\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique.\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,2,3]",
        "expectedOutput": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "isHidden": false
      },
      {
        "input": "nums = [0,1]",
        "expectedOutput": "[[0,1],[1,0]]",
        "isHidden": false
      },
      {
        "input": "nums = [1]",
        "expectedOutput": "[[1]]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "explanation": ""
      },
      {
        "input": "nums = [0,1]",
        "output": "[[0,1],[1,0]]",
        "explanation": ""
      },
      {
        "input": "nums = [1]",
        "output": "[[1]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique."
  },
  {
    "title": "47. Permutations II",
    "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\\n \\nExample 1:\\nInput: nums = [1,1,2]\\nOutput:\\n[[1,1,2],\\n [1,2,1],\\n [2,1,1]]\\n\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 8\\n-10 <= nums[i] <= 10\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\nInput: nums = [1,2,3]",
        "expectedOutput": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\nInput: nums = [1,2,3]",
        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 8\\n-10 <= nums[i] <= 10"
  },
  {
    "title": "48. Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\\n \\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\\n\\nExample 2:\\n\\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\\n\\n \\nConstraints:\\n\\nn == matrix.length == matrix[i].length\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "expectedOutput": "[[7,4,1],[8,5,2],[9,6,3]]",
        "isHidden": false
      },
      {
        "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        "expectedOutput": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": ""
      },
      {
        "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "n == matrix.length == matrix[i].length\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000"
  },
  {
    "title": "49. Group Anagrams",
    "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n \\nExample 1:\\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\nExample 2:\\nInput: strs = [\"\"]\\nOutput: [[\"\"]]\\nExample 3:\\nInput: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n\\n \\nConstraints:\\n\\n1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lowercase English letters.\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "expectedOutput": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "isHidden": false
      },
      {
        "input": "strs = [\"\"]",
        "expectedOutput": "[[\"\"]]",
        "isHidden": false
      },
      {
        "input": "strs = [\"a\"]",
        "expectedOutput": "[[\"a\"]]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": ""
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": ""
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lowercase English letters."
  },
  {
    "title": "50. Pow(x, n)",
    "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\\n \\nExample 1:\\nInput: x = 2.00000, n = 10\\nOutput: 1024.00000\\n\\nExample 2:\\nInput: x = 2.10000, n = 3\\nOutput: 9.26100\\n\\nExample 3:\\nInput: x = 2.00000, n = -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n\\n \\nConstraints:\\n\\n-100.0 < x < 100.0\\n-231 <= n <= 231-1\\nn is an integer.\\nEither x is not zero or n > 0.\\n-104 <= xn <= 104\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "x = 2.00000, n = 10",
        "expectedOutput": "1024.00000",
        "isHidden": false
      },
      {
        "input": "x = 2.10000, n = 3",
        "expectedOutput": "9.26100",
        "isHidden": false
      },
      {
        "input": "x = 2.00000, n = -2",
        "expectedOutput": "0.25000",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "x = 2.00000, n = 10",
        "output": "1024.00000",
        "explanation": ""
      },
      {
        "input": "x = 2.10000, n = 3",
        "output": "9.26100",
        "explanation": ""
      },
      {
        "input": "x = 2.00000, n = -2",
        "output": "0.25000",
        "explanation": "2-2 = 1/22 = 1/4 = 0.25"
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "-100.0 < x < 100.0\\n-231 <= n <= 231-1\\nn is an integer.\\nEither x is not zero or n > 0.\\n-104 <= xn <= 104"
  },
  {
    "title": "51. N-Queens",
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\\n \\nExample 1:\\n\\nInput: n = 4\\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[\"Q\"]]\\n\\n \\nConstraints:\\n\\n1 <= n <= 9\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "n = 4",
        "expectedOutput": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "[[\"Q\"]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
        "explanation": "There exist two distinct solutions to the 4-queens puzzle as shown above"
      },
      {
        "input": "n = 1",
        "output": "[[\"Q\"]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 9"
  },
  {
    "title": "52. N-Queens II",
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.\\n \\nExample 1:\\n\\nInput: n = 4\\nOutput: 2\\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n \\nConstraints:\\n\\n1 <= n <= 9\\n\\n",
    "difficulty": "hard",
    "topic": "dynamic-programming",
    "tags": [
      "dynamic programming",
      "hard"
    ],
    "testCases": [
      {
        "input": "n = 4",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "1",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "2",
        "explanation": "There are two distinct solutions to the 4-queens puzzle as shown."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": ""
      }
    ],
    "solution": "Identify the recurrence relation and build up the solution from smaller subproblems.",
    "hints": [
      "Identify the optimal substructure",
      "Think about overlapping subproblems"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 9"
  },
  {
    "title": "53. Maximum Subarray",
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\\n \\nExample 1:\\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\\nOutput: 6\\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: 1\\nExplanation: The subarray [1] has the largest sum 1.\\n\\nExample 3:\\nInput: nums = [5,4,-1,7,8]\\nOutput: 23\\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n\\n \\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "isHidden": false
      },
      {
        "input": "nums = [1]",
        "expectedOutput": "1",
        "isHidden": false
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "expectedOutput": "23",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The subarray [1] has the largest sum 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 105\\n-104 <= nums[i] <= 104"
  },
  {
    "title": "54. Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order.\\n \\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,3,6,9,8,7,4,5]\\n\\nExample 2:\\n\\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\\n\\n \\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 10\\n-100 <= matrix[i][j] <= 100\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "expectedOutput": "[1,2,3,6,9,8,7,4,5]",
        "isHidden": false
      },
      {
        "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        "expectedOutput": "[1,2,3,4,8,12,11,10,9,5,6,7]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[1,2,3,6,9,8,7,4,5]",
        "explanation": ""
      },
      {
        "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        "output": "[1,2,3,4,8,12,11,10,9,5,6,7]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "m == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 10\\n-100 <= matrix[i][j] <= 100"
  },
  {
    "title": "55. Jump Game",
    "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\\nReturn true if you can reach the last index, or false otherwise.\\n \\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: true\\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [3,2,1,0,4]\\nOutput: false\\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 105\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [2,3,1,1,4]",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "nums = [3,2,1,0,4]",
        "expectedOutput": "false",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [2,3,1,1,4]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = [3,2,1,0,4]",
        "output": "false",
        "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 104\\n0 <= nums[i] <= 105"
  },
  {
    "title": "56. Merge Intervals",
    "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\\n \\nExample 1:\\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\\nOutput: [[1,6],[8,10],[15,18]]\\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\\n\\nExample 2:\\nInput: intervals = [[1,4],[4,5]]\\nOutput: [[1,5]]\\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\\n\\n \\nConstraints:\\n\\n1 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 104\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "expectedOutput": "[[1,6],[8,10],[15,18]]",
        "isHidden": false
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "expectedOutput": "[[1,5]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 104"
  },
  {
    "title": "57. Insert Interval",
    "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\\nReturn intervals after the insertion.\\n \\nExample 1:\\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\\nOutput: [[1,5],[6,9]]\\n\\nExample 2:\\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\\nOutput: [[1,2],[3,10],[12,16]]\\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\\n\\n \\nConstraints:\\n\\n0 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 105\\nintervals is sorted by starti in ascending order.\\nnewInterval.length == 2\\n0 <= start <= end <= 105\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
        "expectedOutput": "[[1,5],[6,9]]",
        "isHidden": false
      },
      {
        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
        "expectedOutput": "[[1,2],[3,10],[12,16]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
        "output": "[[1,5],[6,9]]",
        "explanation": ""
      },
      {
        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
        "output": "[[1,2],[3,10],[12,16]]",
        "explanation": "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 105\\nintervals is sorted by starti in ascending order.\\nnewInterval.length == 2\\n0 <= start <= end <= 105"
  },
  {
    "title": "58. Length of Last Word",
    "description": "Given a string s consisting of words and spaces, return the length of the last word in the string.\\nA word is a maximal substring consisting of non-space characters only.\\n \\nExample 1:\\nInput: s = \"Hello World\"\\nOutput: 5\\nExplanation: The last word is \"World\" with length 5.\\n\\nExample 2:\\nInput: s = \"   fly me   to   the moon  \"\\nOutput: 4\\nExplanation: The last word is \"moon\" with length 4.\\n\\nExample 3:\\nInput: s = \"luffy is still joyboy\"\\nOutput: 6\\nExplanation: The last word is \"joyboy\" with length 6.\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of only English letters and spaces ' '.\\nThere will be at least one word in s.\\n\\n",
    "difficulty": "easy",
    "topic": "string",
    "tags": [
      "string",
      "easy"
    ],
    "testCases": [
      {
        "input": "s = \"Hello World\"",
        "expectedOutput": "5",
        "isHidden": false
      },
      {
        "input": "s = \"   fly me   to   the moon  \"",
        "expectedOutput": "4",
        "isHidden": false
      },
      {
        "input": "s = \"luffy is still joyboy\"",
        "expectedOutput": "6",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"Hello World\"",
        "output": "5",
        "explanation": "The last word is \"World\" with length 5."
      },
      {
        "input": "s = \"   fly me   to   the moon  \"",
        "output": "4",
        "explanation": "The last word is \"moon\" with length 4."
      },
      {
        "input": "s = \"luffy is still joyboy\"",
        "output": "6",
        "explanation": "The last word is \"joyboy\" with length 6."
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= s.length <= 104\\ns consists of only English letters and spaces ' '.\\nThere will be at least one word in s."
  },
  {
    "title": "59. Spiral Matrix II",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\\n \\nExample 1:\\n\\nInput: n = 3\\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n\\n \\nConstraints:\\n\\n1 <= n <= 20\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 3",
        "expectedOutput": "[[1,2,3],[8,9,4],[7,6,5]]",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "[[1]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[[1,2,3],[8,9,4],[7,6,5]]",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "[[1]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 20"
  },
  {
    "title": "60. Permutation Sequence",
    "description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\\n\\n\"123\"\\n\"132\"\\n\"213\"\\n\"231\"\\n\"312\"\\n\"321\"\\n\\nGiven n and k, return the kth permutation sequence.\\n \\nExample 1:\\nInput: n = 3, k = 3\\nOutput: \"213\"\\nExample 2:\\nInput: n = 4, k = 9\\nOutput: \"2314\"\\nExample 3:\\nInput: n = 3, k = 1\\nOutput: \"123\"\\n\\n \\nConstraints:\\n\\n1 <= n <= 9\\n1 <= k <= n!\\n\\n",
    "difficulty": "hard",
    "topic": "math",
    "tags": [
      "math",
      "hard"
    ],
    "testCases": [
      {
        "input": "n = 3, k = 3",
        "expectedOutput": "\"213\"",
        "isHidden": false
      },
      {
        "input": "n = 4, k = 9",
        "expectedOutput": "\"2314\"",
        "isHidden": false
      },
      {
        "input": "n = 3, k = 1",
        "expectedOutput": "\"123\"",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "n = 3, k = 3",
        "output": "\"213\"",
        "explanation": ""
      },
      {
        "input": "n = 4, k = 9",
        "output": "\"2314\"",
        "explanation": ""
      },
      {
        "input": "n = 3, k = 1",
        "output": "\"123\"",
        "explanation": ""
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 9\\n1 <= k <= n!"
  },
  {
    "title": "61. Rotate List",
    "description": "Given the head of a linked list, rotate the list to the right by k places.\\n \\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [4,5,1,2,3]\\n\\nExample 2:\\n\\nInput: head = [0,1,2], k = 4\\nOutput: [2,0,1]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 500].\\n-100 <= Node.val <= 100\\n0 <= k <= 2 * 109\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "expectedOutput": "[4,5,1,2,3]",
        "isHidden": false
      },
      {
        "input": "head = [0,1,2], k = 4",
        "expectedOutput": "[2,0,1]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[4,5,1,2,3]",
        "explanation": ""
      },
      {
        "input": "head = [0,1,2], k = 4",
        "output": "[2,0,1]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is in the range [0, 500].\\n-100 <= Node.val <= 100\\n0 <= k <= 2 * 109"
  },
  {
    "title": "62. Unique Paths",
    "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\\n \\nExample 1:\\n\\nInput: m = 3, n = 7\\nOutput: 28\\n\\nExample 2:\\nInput: m = 3, n = 2\\nOutput: 3\\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -> Down -> Down\\n2. Down -> Down -> Right\\n3. Down -> Right -> Down\\n\\n \\nConstraints:\\n\\n1 <= m, n <= 100\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "m = 3, n = 7",
        "expectedOutput": "28",
        "isHidden": false
      },
      {
        "input": "m = 3, n = 2",
        "expectedOutput": "3",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28",
        "explanation": ""
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down"
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= m, n <= 100"
  },
  {
    "title": "63. Unique Paths II",
    "description": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\\n \\nExample 1:\\n\\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\\nOutput: 2\\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\\nThere are two ways to reach the bottom-right corner:\\n1. Right -> Right -> Down -> Down\\n2. Down -> Down -> Right -> Right\\n\\nExample 2:\\n\\nInput: obstacleGrid = [[0,1],[0,0]]\\nOutput: 1\\n\\n \\nConstraints:\\n\\nm == obstacleGrid.length\\nn == obstacleGrid[i].length\\n1 <= m, n <= 100\\nobstacleGrid[i][j] is 0 or 1.\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "obstacleGrid = [[0,1],[0,0]]",
        "expectedOutput": "1",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "2",
        "explanation": "There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right"
      },
      {
        "input": "obstacleGrid = [[0,1],[0,0]]",
        "output": "1",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "m == obstacleGrid.length\\nn == obstacleGrid[i].length\\n1 <= m, n <= 100\\nobstacleGrid[i][j] is 0 or 1."
  },
  {
    "title": "64. Minimum Path Sum",
    "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\\nNote: You can only move either down or right at any point in time.\\n \\nExample 1:\\n\\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\\nOutput: 7\\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\\n\\nExample 2:\\nInput: grid = [[1,2,3],[4,5,6]]\\nOutput: 12\\n\\n \\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 200\\n0 <= grid[i][j] <= 200\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "expectedOutput": "7",
        "isHidden": false
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]]",
        "expectedOutput": "12",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "output": "7",
        "explanation": "Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum."
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]]",
        "output": "12",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "m == grid.length\\nn == grid[i].length\\n1 <= m, n <= 200\\n0 <= grid[i][j] <= 200"
  },
  {
    "title": "65. Valid Number",
    "description": "A valid number can be split up into these components (in order):\\n\\nA decimal number or an integer.\\n(Optional) An 'e' or 'E', followed by an integer.\\n\\nA decimal number can be split up into these components (in order):\\n\\n(Optional) A sign character (either '+' or '-').\\nOne of the following formats:\\n\t\\nOne or more digits, followed by a dot '.'.\\nOne or more digits, followed by a dot '.', followed by one or more digits.\\nA dot '.', followed by one or more digits.\\n\\n\\n\\nAn integer can be split up into these components (in order):\\n\\n(Optional) A sign character (either '+' or '-').\\nOne or more digits.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\\nGiven a string s, return true if s is a valid number.\\n \\nExample 1:\\nInput: s = \"0\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"e\"\\nOutput: false\\n\\nExample 3:\\nInput: s = \".\"\\nOutput: false\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 20\\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.\\n\\n",
    "difficulty": "hard",
    "topic": "string",
    "tags": [
      "string",
      "hard"
    ],
    "testCases": [
      {
        "input": "s = \"0\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "s = \"e\"",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "s = \".\"",
        "expectedOutput": "false",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"0\"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "s = \"e\"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "s = \".\"",
        "output": "false",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 20\\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'."
  },
  {
    "title": "66. Plus One",
    "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\\nIncrement the large integer by one and return the resulting array of digits.\\n \\nExample 1:\\nInput: digits = [1,2,3]\\nOutput: [1,2,4]\\nExplanation: The array represents the integer 123.\\nIncrementing by one gives 123 + 1 = 124.\\nThus, the result should be [1,2,4].\\n\\nExample 2:\\nInput: digits = [4,3,2,1]\\nOutput: [4,3,2,2]\\nExplanation: The array represents the integer 4321.\\nIncrementing by one gives 4321 + 1 = 4322.\\nThus, the result should be [4,3,2,2].\\n\\nExample 3:\\nInput: digits = [9]\\nOutput: [1,0]\\nExplanation: The array represents the integer 9.\\nIncrementing by one gives 9 + 1 = 10.\\nThus, the result should be [1,0].\\n\\n \\nConstraints:\\n\\n1 <= digits.length <= 100\\n0 <= digits[i] <= 9\\ndigits does not contain any leading 0's.\\n\\n",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "digits = [1,2,3]",
        "expectedOutput": "[1,2,4]",
        "isHidden": false
      },
      {
        "input": "digits = [4,3,2,1]",
        "expectedOutput": "[4,3,2,2]",
        "isHidden": false
      },
      {
        "input": "digits = [9]",
        "expectedOutput": "[1,0]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "digits = [1,2,3]",
        "output": "[1,2,4]",
        "explanation": "The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4]."
      },
      {
        "input": "digits = [4,3,2,1]",
        "output": "[4,3,2,2]",
        "explanation": "The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2]."
      },
      {
        "input": "digits = [9]",
        "output": "[1,0]",
        "explanation": "The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0]."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= digits.length <= 100\\n0 <= digits[i] <= 9\\ndigits does not contain any leading 0's."
  },
  {
    "title": "67. Add Binary",
    "description": "Given two binary strings a and b, return their sum as a binary string.\\n \\nExample 1:\\nInput: a = \"11\", b = \"1\"\\nOutput: \"100\"\\nExample 2:\\nInput: a = \"1010\", b = \"1011\"\\nOutput: \"10101\"\\n\\n \\nConstraints:\\n\\n1 <= a.length, b.length <= 104\\na and b consist only of '0' or '1' characters.\\nEach string does not contain leading zeros except for the zero itself.\\n\\n",
    "difficulty": "easy",
    "topic": "math",
    "tags": [
      "math",
      "easy"
    ],
    "testCases": [
      {
        "input": "a = \"11\", b = \"1\"",
        "expectedOutput": "\"100\"",
        "isHidden": false
      },
      {
        "input": "a = \"1010\", b = \"1011\"",
        "expectedOutput": "\"10101\"",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "a = \"11\", b = \"1\"",
        "output": "\"100\"",
        "explanation": ""
      },
      {
        "input": "a = \"1010\", b = \"1011\"",
        "output": "\"10101\"",
        "explanation": ""
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= a.length, b.length <= 104\\na and b consist only of '0' or '1' characters.\\nEach string does not contain leading zeros except for the zero itself."
  },
  {
    "title": "68. Text Justification",
    "description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\\nNote:\\n\\nA word is defined as a character sequence consisting of non-space characters only.\\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\\nThe input array words contains at least one word.\\n\\n \\nExample 1:\\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\\nOutput:\\n[\\n   \"This    is    an\",\\n   \"example  of text\",\\n   \"justification.  \"\\n]\\nExample 2:\\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\\nOutput:\\n[\\n  \"What   must   be\",\\n  \"acknowledgment  \",\\n  \"shall be        \"\\n]\\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\\nNote that the second line is also left-justified because it contains only one word.\\nExample 3:\\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\\nOutput:\\n[\\n  \"Science  is  what we\",\\n  \"understand      well\",\\n  \"enough to explain to\",\\n  \"a  computer.  Art is\",\\n  \"everything  else  we\",\\n  \"do                  \"\\n]\\n \\nConstraints:\\n\\n1 <= words.length <= 300\\n1 <= words[i].length <= 20\\nwords[i] consists of only English letters and symbols.\\n1 <= maxWidth <= 100\\nwords[i].length <= maxWidth\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [],
    "examples": [],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= words.length <= 300\\n1 <= words[i].length <= 20\\nwords[i] consists of only English letters and symbols.\\n1 <= maxWidth <= 100\\nwords[i].length <= maxWidth"
  },
  {
    "title": "69. Sqrt(x)",
    "description": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\\nYou must not use any built-in exponent function or operator.\\n\\nFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\\n\\n \\nExample 1:\\nInput: x = 4\\nOutput: 2\\nExplanation: The square root of 4 is 2, so we return 2.\\n\\nExample 2:\\nInput: x = 8\\nOutput: 2\\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\\n\\n \\nConstraints:\\n\\n0 <= x <= 231 - 1\\n\\n",
    "difficulty": "easy",
    "topic": "math",
    "tags": [
      "math",
      "easy"
    ],
    "testCases": [
      {
        "input": "x = 4",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "x = 8",
        "expectedOutput": "2",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "x = 4",
        "output": "2",
        "explanation": "The square root of 4 is 2, so we return 2."
      },
      {
        "input": "x = 8",
        "output": "2",
        "explanation": "The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "0 <= x <= 231 - 1"
  },
  {
    "title": "70. Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top.\\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\\n \\nExample 1:\\nInput: n = 2\\nOutput: 2\\nExplanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps\\n\\nExample 2:\\nInput: n = 3\\nOutput: 3\\nExplanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step\\n\\n \\nConstraints:\\n\\n1 <= n <= 45\\n\\n",
    "difficulty": "easy",
    "topic": "math",
    "tags": [
      "math",
      "easy"
    ],
    "testCases": [
      {
        "input": "n = 2",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "n = 3",
        "expectedOutput": "3",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "1 <= n <= 45"
  },
  {
    "title": "71. Simplify Path",
    "description": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\\nIn a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\\nThe canonical path should have the following format:\\n\\nThe path starts with a single slash '/'.\\nAny two directories are separated by a single slash '/'.\\nThe path does not end with a trailing '/'.\\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\\n\\nReturn the simplified canonical path.\\n \\nExample 1:\\nInput: path = \"/home/\"\\nOutput: \"/home\"\\nExplanation: Note that there is no trailing slash after the last directory name.\\n\\nExample 2:\\nInput: path = \"/../\"\\nOutput: \"/\"\\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\n\\nExample 3:\\nInput: path = \"/home//foo/\"\\nOutput: \"/home/foo\"\\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\\n\\n \\nConstraints:\\n\\n1 <= path.length <= 3000\\npath consists of English letters, digits, period '.', slash '/' or '_'.\\npath is a valid absolute Unix path.\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "path = \"/home/\"",
        "expectedOutput": "\"/home\"",
        "isHidden": false
      },
      {
        "input": "path = \"/../\"",
        "expectedOutput": "\"/\"",
        "isHidden": false
      },
      {
        "input": "path = \"/home//foo/\"",
        "expectedOutput": "\"/home/foo\"",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "path = \"/home/\"",
        "output": "\"/home\"",
        "explanation": "Note that there is no trailing slash after the last directory name."
      },
      {
        "input": "path = \"/../\"",
        "output": "\"/\"",
        "explanation": "Going one level up from the root directory is a no-op, as the root level is the highest level you can go."
      },
      {
        "input": "path = \"/home//foo/\"",
        "output": "\"/home/foo\"",
        "explanation": "In the canonical path, multiple consecutive slashes are replaced by a single one."
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= path.length <= 3000\\npath consists of English letters, digits, period '.', slash '/' or '_'.\\npath is a valid absolute Unix path."
  },
  {
    "title": "72. Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\\nYou have the following three operations permitted on a word:\\n\\nInsert a character\\nDelete a character\\nReplace a character\\n\\n \\nExample 1:\\nInput: word1 = \"horse\", word2 = \"ros\"\\nOutput: 3\\nExplanation: \\nhorse -> rorse (replace 'h' with 'r')\\nrorse -> rose (remove 'r')\\nrose -> ros (remove 'e')\\n\\nExample 2:\\nInput: word1 = \"intention\", word2 = \"execution\"\\nOutput: 5\\nExplanation: \\nintention -> inention (remove 't')\\ninention -> enention (replace 'i' with 'e')\\nenention -> exention (replace 'n' with 'x')\\nexention -> exection (replace 'n' with 'c')\\nexection -> execution (insert 'u')\\n\\n \\nConstraints:\\n\\n0 <= word1.length, word2.length <= 500\\nword1 and word2 consist of lowercase English letters.\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "word1 = \"horse\", word2 = \"ros\"",
        "expectedOutput": "3",
        "isHidden": false
      },
      {
        "input": "word1 = \"intention\", word2 = \"execution\"",
        "expectedOutput": "5",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "word1 = \"horse\", word2 = \"ros\"",
        "output": "3",
        "explanation": "horse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')"
      },
      {
        "input": "word1 = \"intention\", word2 = \"execution\"",
        "output": "5",
        "explanation": "intention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= word1.length, word2.length <= 500\\nword1 and word2 consist of lowercase English letters."
  },
  {
    "title": "73. Set Matrix Zeroes",
    "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\\nYou must do it in place.\\n \\nExample 1:\\n\\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\\n\\nExample 2:\\n\\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\\n\\n \\nConstraints:\\n\\nm == matrix.length\\nn == matrix[0].length\\n1 <= m, n <= 200\\n-231 <= matrix[i][j] <= 231 - 1\\n\\n \\nFollow up:\\n\\nA straightforward solution using O(mn) space is probably a bad idea.\\nA simple improvement uses O(m + n) space, but still not the best solution.\\nCould you devise a constant space solution?\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        "expectedOutput": "[[1,0,1],[0,0,0],[1,0,1]]",
        "isHidden": false
      },
      {
        "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        "expectedOutput": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "[[1,0,1],[0,0,0],[1,0,1]]",
        "explanation": ""
      },
      {
        "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "m == matrix.length\\nn == matrix[0].length\\n1 <= m, n <= 200\\n-231 <= matrix[i][j] <= 231 - 1"
  },
  {
    "title": "74. Search a 2D Matrix",
    "description": "You are given an m x n integer matrix matrix with the following two properties:\\n\\nEach row is sorted in non-decreasing order.\\nThe first integer of each row is greater than the last integer of the previous row.\\n\\nGiven an integer target, return true if target is in matrix or false otherwise.\\nYou must write a solution in O(log(m * n)) time complexity.\\n \\nExample 1:\\n\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\\nOutput: true\\n\\nExample 2:\\n\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\\nOutput: false\\n\\n \\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 100\\n-104 <= matrix[i][j], target <= 104\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        "expectedOutput": "false",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        "output": "false",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "m == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 100\\n-104 <= matrix[i][j], target <= 104"
  },
  {
    "title": "75. Sort Colors",
    "description": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\\nYou must solve this problem without using the library's sort function.\\n \\nExample 1:\\nInput: nums = [2,0,2,1,1,0]\\nOutput: [0,0,1,1,2,2]\\n\\nExample 2:\\nInput: nums = [2,0,1]\\nOutput: [0,1,2]\\n\\n \\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 300\\nnums[i] is either 0, 1, or 2.\\n\\n \\nFollow up: Could you come up with a one-pass algorithm using only constant extra space?\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [2,0,2,1,1,0]",
        "expectedOutput": "[0,0,1,1,2,2]",
        "isHidden": false
      },
      {
        "input": "nums = [2,0,1]",
        "expectedOutput": "[0,1,2]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]",
        "explanation": ""
      },
      {
        "input": "nums = [2,0,1]",
        "output": "[0,1,2]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "n == nums.length\\n1 <= n <= 300\\nnums[i] is either 0, 1, or 2."
  },
  {
    "title": "76. Minimum Window Substring",
    "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\\nThe testcases will be generated such that the answer is unique.\\n \\nExample 1:\\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\\nOutput: \"BANC\"\\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\\n\\nExample 2:\\nInput: s = \"a\", t = \"a\"\\nOutput: \"a\"\\nExplanation: The entire string s is the minimum window.\\n\\nExample 3:\\nInput: s = \"a\", t = \"aa\"\\nOutput: \"\"\\nExplanation: Both 'a's from t must be included in the window.\\nSince the largest window of s only has one 'a', return empty string.\\n\\n \\nConstraints:\\n\\nm == s.length\\nn == t.length\\n1 <= m, n <= 105\\ns and t consist of uppercase and lowercase English letters.\\n\\n \\nFollow up: Could you find an algorithm that runs in O(m + n) time?\\n",
    "difficulty": "hard",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "hard"
    ],
    "testCases": [
      {
        "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
        "expectedOutput": "\"BANC\"",
        "isHidden": false
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "expectedOutput": "\"a\"",
        "isHidden": false
      },
      {
        "input": "s = \"a\", t = \"aa\"",
        "expectedOutput": "\"\"",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
        "output": "\"BANC\"",
        "explanation": "The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "output": "\"a\"",
        "explanation": "The entire string s is the minimum window."
      },
      {
        "input": "s = \"a\", t = \"aa\"",
        "output": "\"\"",
        "explanation": "Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "m == s.length\\nn == t.length\\n1 <= m, n <= 105\\ns and t consist of uppercase and lowercase English letters."
  },
  {
    "title": "77. Combinations",
    "description": "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\\nYou may return the answer in any order.\\n \\nExample 1:\\nInput: n = 4, k = 2\\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\\nExplanation: There are 4 choose 2 = 6 total combinations.\\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\\n\\nExample 2:\\nInput: n = 1, k = 1\\nOutput: [[1]]\\nExplanation: There is 1 choose 1 = 1 total combination.\\n\\n \\nConstraints:\\n\\n1 <= n <= 20\\n1 <= k <= n\\n\\n",
    "difficulty": "medium",
    "topic": "dynamic-programming",
    "tags": [
      "dynamic programming",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 4, k = 2",
        "expectedOutput": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
        "isHidden": false
      },
      {
        "input": "n = 1, k = 1",
        "expectedOutput": "[[1]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 4, k = 2",
        "output": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
        "explanation": "There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination."
      },
      {
        "input": "n = 1, k = 1",
        "output": "[[1]]",
        "explanation": "There is 1 choose 1 = 1 total combination."
      }
    ],
    "solution": "Identify the recurrence relation and build up the solution from smaller subproblems.",
    "hints": [
      "Identify the optimal substructure",
      "Think about overlapping subproblems"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 20\\n1 <= k <= n"
  },
  {
    "title": "78. Subsets",
    "description": "Given an integer array nums of unique elements, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n \\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\\n\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\nAll the numbers of nums are unique.\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,2,3]",
        "expectedOutput": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
        "isHidden": false
      },
      {
        "input": "nums = [0]",
        "expectedOutput": "[[],[0]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,3]",
        "output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
        "explanation": ""
      },
      {
        "input": "nums = [0]",
        "output": "[[],[0]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\nAll the numbers of nums are unique."
  },
  {
    "title": "79. Word Search",
    "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\\n \\nExample 1:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\\nOutput: true\\n\\nExample 2:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\\nOutput: true\\n\\nExample 3:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\\nOutput: false\\n\\n \\nConstraints:\\n\\nm == board.length\\nn = board[i].length\\n1 <= m, n <= 6\\n1 <= word.length <= 15\\nboard and word consists of only lowercase and uppercase English letters.\\n\\n \\nFollow up: Could you use search pruning to make your solution faster with a larger board?\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
        "expectedOutput": "false",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
        "output": "false",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "m == board.length\\nn = board[i].length\\n1 <= m, n <= 6\\n1 <= word.length <= 15\\nboard and word consists of only lowercase and uppercase English letters."
  },
  {
    "title": "80. Remove Duplicates from Sorted Array II",
    "description": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n \\nExample 1:\\nInput: nums = [1,1,1,2,2,3]\\nOutput: 5, nums = [1,1,2,2,3,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,1,2,3,3]\\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-104 <= nums[i] <= 104\\nnums is sorted in non-decreasing order.\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,1,1,2,2,3]",
        "expectedOutput": "5, nums = [1,1,2,2,3,_]",
        "isHidden": false
      },
      {
        "input": "nums = [0,0,1,1,1,1,2,3,3]",
        "expectedOutput": "7, nums = [0,0,1,1,2,3,3,_,_]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "5, nums = [1,1,2,2,3,_]",
        "explanation": "Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
      },
      {
        "input": "nums = [0,0,1,1,1,1,2,3,3]",
        "output": "7, nums = [0,0,1,1,2,3,3,_,_]",
        "explanation": "Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 3 * 104\\n-104 <= nums[i] <= 104\\nnums is sorted in non-decreasing order."
  },
  {
    "title": "81. Search in Rotated Sorted Array II",
    "description": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\\nYou must decrease the overall operation steps as much as possible.\\n \\nExample 1:\\nInput: nums = [2,5,6,0,0,1,2], target = 0\\nOutput: true\\nExample 2:\\nInput: nums = [2,5,6,0,0,1,2], target = 3\\nOutput: false\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nnums is guaranteed to be rotated at some pivot.\\n-104 <= target <= 104\\n\\n \\nFollow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 0",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 3",
        "expectedOutput": "false",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 0",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "nums = [2,5,6,0,0,1,2], target = 3",
        "output": "false",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nnums is guaranteed to be rotated at some pivot.\\n-104 <= target <= 104"
  },
  {
    "title": "82. Remove Duplicates from Sorted List II",
    "description": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\\n \\nExample 1:\\n\\nInput: head = [1,2,3,3,4,4,5]\\nOutput: [1,2,5]\\n\\nExample 2:\\n\\nInput: head = [1,1,1,2,3]\\nOutput: [2,3]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "head = [1,2,3,3,4,4,5]",
        "expectedOutput": "[1,2,5]",
        "isHidden": false
      },
      {
        "input": "head = [1,1,1,2,3]",
        "expectedOutput": "[2,3]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,3,4,4,5]",
        "output": "[1,2,5]",
        "explanation": ""
      },
      {
        "input": "head = [1,1,1,2,3]",
        "output": "[2,3]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order."
  },
  {
    "title": "83. Remove Duplicates from Sorted List",
    "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\\n \\nExample 1:\\n\\nInput: head = [1,1,2]\\nOutput: [1,2]\\n\\nExample 2:\\n\\nInput: head = [1,1,2,3,3]\\nOutput: [1,2,3]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\\n\\n",
    "difficulty": "easy",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "easy"
    ],
    "testCases": [
      {
        "input": "head = [1,1,2]",
        "expectedOutput": "[1,2]",
        "isHidden": false
      },
      {
        "input": "head = [1,1,2,3,3]",
        "expectedOutput": "[1,2,3]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "head = [1,1,2]",
        "output": "[1,2]",
        "explanation": ""
      },
      {
        "input": "head = [1,1,2,3,3]",
        "output": "[1,2,3]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "The number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order."
  },
  {
    "title": "84. Largest Rectangle in Histogram",
    "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\\n \\nExample 1:\\n\\nInput: heights = [2,1,5,6,2,3]\\nOutput: 10\\nExplanation: The above is a histogram where width of each bar is 1.\\nThe largest rectangle is shown in the red area, which has an area = 10 units.\\n\\nExample 2:\\n\\nInput: heights = [2,4]\\nOutput: 4\\n\\n \\nConstraints:\\n\\n1 <= heights.length <= 105\\n0 <= heights[i] <= 104\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "heights = [2,1,5,6,2,3]",
        "expectedOutput": "10",
        "isHidden": false
      },
      {
        "input": "heights = [2,4]",
        "expectedOutput": "4",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "heights = [2,1,5,6,2,3]",
        "output": "10",
        "explanation": "The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units."
      },
      {
        "input": "heights = [2,4]",
        "output": "4",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= heights.length <= 105\\n0 <= heights[i] <= 104"
  },
  {
    "title": "85. Maximal Rectangle",
    "description": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\\n \\nExample 1:\\n\\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\\nOutput: 6\\nExplanation: The maximal rectangle is shown in the above picture.\\n\\nExample 2:\\nInput: matrix = [[\"0\"]]\\nOutput: 0\\n\\nExample 3:\\nInput: matrix = [[\"1\"]]\\nOutput: 1\\n\\n \\nConstraints:\\n\\nrows == matrix.length\\ncols == matrix[i].length\\n1 <= row, cols <= 200\\nmatrix[i][j] is '0' or '1'.\\n\\n",
    "difficulty": "hard",
    "topic": "array",
    "tags": [
      "array",
      "hard"
    ],
    "testCases": [
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "expectedOutput": "6",
        "isHidden": false
      },
      {
        "input": "matrix = [[\"0\"]]",
        "expectedOutput": "0",
        "isHidden": false
      },
      {
        "input": "matrix = [[\"1\"]]",
        "expectedOutput": "1",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "output": "6",
        "explanation": "The maximal rectangle is shown in the above picture."
      },
      {
        "input": "matrix = [[\"0\"]]",
        "output": "0",
        "explanation": ""
      },
      {
        "input": "matrix = [[\"1\"]]",
        "output": "1",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "rows == matrix.length\\ncols == matrix[i].length\\n1 <= row, cols <= 200\\nmatrix[i][j] is '0' or '1'."
  },
  {
    "title": "86. Partition List",
    "description": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\\nYou should preserve the original relative order of the nodes in each of the two partitions.\\n \\nExample 1:\\n\\nInput: head = [1,4,3,2,5,2], x = 3\\nOutput: [1,2,2,4,3,5]\\n\\nExample 2:\\nInput: head = [2,1], x = 2\\nOutput: [1,2]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 200].\\n-100 <= Node.val <= 100\\n-200 <= x <= 200\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "head = [1,4,3,2,5,2], x = 3",
        "expectedOutput": "[1,2,2,4,3,5]",
        "isHidden": false
      },
      {
        "input": "head = [2,1], x = 2",
        "expectedOutput": "[1,2]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "head = [1,4,3,2,5,2], x = 3",
        "output": "[1,2,2,4,3,5]",
        "explanation": ""
      },
      {
        "input": "head = [2,1], x = 2",
        "output": "[1,2]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is in the range [0, 200].\\n-100 <= Node.val <= 100\\n-200 <= x <= 200"
  },
  {
    "title": "87. Scramble String",
    "description": "We can scramble a string s to get a string t using the following algorithm:\\n\\nIf the length of the string is 1, stop.\\nIf the length of the string is > 1, do the following:\\n\t\\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\\nRandomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\\nApply step 1 recursively on each of the two substrings x and y.\\n\\n\\n\\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\\n \\nExample 1:\\nInput: s1 = \"great\", s2 = \"rgeat\"\\nOutput: true\\nExplanation: One possible scenario applied on s1 is:\\n\"great\" --> \"gr/eat\" // divide at random index.\\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\\nAs one possible scenario led s1 to be scrambled to s2, we return true.\\n\\nExample 2:\\nInput: s1 = \"abcde\", s2 = \"caebd\"\\nOutput: false\\n\\nExample 3:\\nInput: s1 = \"a\", s2 = \"a\"\\nOutput: true\\n\\n \\nConstraints:\\n\\ns1.length == s2.length\\n1 <= s1.length <= 30\\ns1 and s2 consist of lowercase English letters.\\n\\n",
    "difficulty": "hard",
    "topic": "string",
    "tags": [
      "string",
      "hard"
    ],
    "testCases": [
      {
        "input": "s1 = \"great\", s2 = \"rgeat\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "s1 = \"abcde\", s2 = \"caebd\"",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "s1 = \"a\", s2 = \"a\"",
        "expectedOutput": "true",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s1 = \"great\", s2 = \"rgeat\"",
        "output": "true",
        "explanation": "One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true."
      },
      {
        "input": "s1 = \"abcde\", s2 = \"caebd\"",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "s1 = \"a\", s2 = \"a\"",
        "output": "true",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n²)",
    "spaceComplexity": "O(n)",
    "constraints": "s1.length == s2.length\\n1 <= s1.length <= 30\\ns1 and s2 consist of lowercase English letters."
  },
  {
    "title": "88. Merge Sorted Array",
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\\n \\nExample 1:\\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\\nOutput: [1,2,2,3,5,6]\\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\\n\\nExample 2:\\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\\nOutput: [1]\\nExplanation: The arrays we are merging are [1] and [].\\nThe result of the merge is [1].\\n\\nExample 3:\\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\\nOutput: [1]\\nExplanation: The arrays we are merging are [] and [1].\\nThe result of the merge is [1].\\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\\n\\n \\nConstraints:\\n\\nnums1.length == m + n\\nnums2.length == n\\n0 <= m, n <= 200\\n1 <= m + n <= 200\\n-109 <= nums1[i], nums2[j] <= 109\\n\\n \\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?\\n",
    "difficulty": "easy",
    "topic": "array",
    "tags": [
      "array",
      "easy"
    ],
    "testCases": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "expectedOutput": "[1,2,2,3,5,6]",
        "isHidden": false
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "expectedOutput": "[1]",
        "isHidden": false
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "expectedOutput": "[1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "The arrays we are merging are [1] and [].\nThe result of the merge is [1]."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "nums1.length == m + n\\nnums2.length == n\\n0 <= m, n <= 200\\n1 <= m + n <= 200\\n-109 <= nums1[i], nums2[j] <= 109"
  },
  {
    "title": "89. Gray Code",
    "description": "An n-bit gray code sequence is a sequence of 2n integers where:\\n\\nEvery integer is in the inclusive range [0, 2n - 1],\\nThe first integer is 0,\\nAn integer appears no more than once in the sequence,\\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\\nThe binary representation of the first and last integers differs by exactly one bit.\\n\\nGiven an integer n, return any valid n-bit gray code sequence.\\n \\nExample 1:\\nInput: n = 2\\nOutput: [0,1,3,2]\\nExplanation:\\nThe binary representation of [0,1,3,2] is [00,01,11,10].\\n- 00 and 01 differ by one bit\\n- 01 and 11 differ by one bit\\n- 11 and 10 differ by one bit\\n- 10 and 00 differ by one bit\\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\\n- 00 and 10 differ by one bit\\n- 10 and 11 differ by one bit\\n- 11 and 01 differ by one bit\\n- 01 and 00 differ by one bit\\n\\nExample 2:\\nInput: n = 1\\nOutput: [0,1]\\n\\n \\nConstraints:\\n\\n1 <= n <= 16\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 2",
        "expectedOutput": "[0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "[0,1]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "[0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "[0,1]",
        "explanation": ""
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 16"
  },
  {
    "title": "90. Subsets II",
    "description": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n \\nExample 1:\\nInput: nums = [1,2,2]\\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n\\n \\nConstraints:\\n\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\n\\n",
    "difficulty": "medium",
    "topic": "array",
    "tags": [
      "array",
      "medium"
    ],
    "testCases": [
      {
        "input": "nums = [1,2,2]",
        "expectedOutput": "[[],[1],[1,2],[1,2,2],[2],[2,2]]",
        "isHidden": false
      },
      {
        "input": "nums = [0]",
        "expectedOutput": "[[],[0]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "nums = [1,2,2]",
        "output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]",
        "explanation": ""
      },
      {
        "input": "nums = [0]",
        "output": "[[],[0]]",
        "explanation": ""
      }
    ],
    "solution": "Use array manipulation techniques like two pointers, sliding window, or hash maps for efficient solutions.",
    "hints": [
      "Think about using two pointers or sliding window technique",
      "Consider using a hash map for O(1) lookups"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= nums.length <= 10\\n-10 <= nums[i] <= 10"
  },
  {
    "title": "91. Decode Ways",
    "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\\n'A' -> \"1\"\\n'B' -> \"2\"\\n...\\n'Z' -> \"26\"\\n\\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\\n\\n\"AAJF\" with the grouping (1 1 10 6)\\n\"KJF\" with the grouping (11 10 6)\\n\\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\\nGiven a string s containing only digits, return the number of ways to decode it.\\nThe test cases are generated so that the answer fits in a 32-bit integer.\\n \\nExample 1:\\nInput: s = \"12\"\\nOutput: 2\\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\\n\\nExample 2:\\nInput: s = \"226\"\\nOutput: 3\\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\\n\\nExample 3:\\nInput: s = \"06\"\\nOutput: 0\\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 100\\ns contains only digits and may contain leading zero(s).\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "s = \"12\"",
        "expectedOutput": "2",
        "isHidden": false
      },
      {
        "input": "s = \"226\"",
        "expectedOutput": "3",
        "isHidden": false
      },
      {
        "input": "s = \"06\"",
        "expectedOutput": "0",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"12\"",
        "output": "2",
        "explanation": "\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
      },
      {
        "input": "s = \"226\"",
        "output": "3",
        "explanation": "\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
      },
      {
        "input": "s = \"06\"",
        "output": "0",
        "explanation": "\"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 100\\ns contains only digits and may contain leading zero(s)."
  },
  {
    "title": "92. Reverse Linked List II",
    "description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\\n \\nExample 1:\\n\\nInput: head = [1,2,3,4,5], left = 2, right = 4\\nOutput: [1,4,3,2,5]\\n\\nExample 2:\\nInput: head = [5], left = 1, right = 1\\nOutput: [5]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= n <= 500\\n-500 <= Node.val <= 500\\n1 <= left <= right <= n\\n\\n \\nFollow up: Could you do it in one pass?",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "head = [1,2,3,4,5], left = 2, right = 4",
        "expectedOutput": "[1,4,3,2,5]",
        "isHidden": false
      },
      {
        "input": "head = [5], left = 1, right = 1",
        "expectedOutput": "[5]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], left = 2, right = 4",
        "output": "[1,4,3,2,5]",
        "explanation": ""
      },
      {
        "input": "head = [5], left = 1, right = 1",
        "output": "[5]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the list is n.\\n1 <= n <= 500\\n-500 <= Node.val <= 500\\n1 <= left <= right <= n"
  },
  {
    "title": "93. Restore IP Addresses",
    "description": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\\n\\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\\n\\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\\n \\nExample 1:\\nInput: s = \"25525511135\"\\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\\n\\nExample 2:\\nInput: s = \"0000\"\\nOutput: [\"0.0.0.0\"]\\n\\nExample 3:\\nInput: s = \"101023\"\\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\\n\\n \\nConstraints:\\n\\n1 <= s.length <= 20\\ns consists of digits only.\\n\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "s = \"25525511135\"",
        "expectedOutput": "[\"255.255.11.135\",\"255.255.111.35\"]",
        "isHidden": false
      },
      {
        "input": "s = \"0000\"",
        "expectedOutput": "[\"0.0.0.0\"]",
        "isHidden": false
      },
      {
        "input": "s = \"101023\"",
        "expectedOutput": "[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s = \"25525511135\"",
        "output": "[\"255.255.11.135\",\"255.255.111.35\"]",
        "explanation": ""
      },
      {
        "input": "s = \"0000\"",
        "output": "[\"0.0.0.0\"]",
        "explanation": ""
      },
      {
        "input": "s = \"101023\"",
        "output": "[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= s.length <= 20\\ns consists of digits only."
  },
  {
    "title": "94. Binary Tree Inorder Traversal",
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\\n \\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n \\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n \\nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "difficulty": "easy",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "easy"
    ],
    "testCases": [
      {
        "input": "root = [1,null,2,3]",
        "expectedOutput": "[1,3,2]",
        "isHidden": false
      },
      {
        "input": "root = []",
        "expectedOutput": "[]",
        "isHidden": false
      },
      {
        "input": "root = [1]",
        "expectedOutput": "[1]",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "root = [1,null,2,3]",
        "output": "[1,3,2]",
        "explanation": ""
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": ""
      },
      {
        "input": "root = [1]",
        "output": "[1]",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "The number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100"
  },
  {
    "title": "95. Unique Binary Search Trees II",
    "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\\n \\nExample 1:\\n\\nInput: n = 3\\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n\\n \\nConstraints:\\n\\n1 <= n <= 8\\n\\n",
    "difficulty": "medium",
    "topic": "dynamic-programming",
    "tags": [
      "dynamic programming",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 3",
        "expectedOutput": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "[[1]]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "[[1]]",
        "explanation": ""
      }
    ],
    "solution": "Identify the recurrence relation and build up the solution from smaller subproblems.",
    "hints": [
      "Identify the optimal substructure",
      "Think about overlapping subproblems"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 8"
  },
  {
    "title": "96. Unique Binary Search Trees",
    "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\\n \\nExample 1:\\n\\nInput: n = 3\\nOutput: 5\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n \\nConstraints:\\n\\n1 <= n <= 19\\n\\n",
    "difficulty": "medium",
    "topic": "math",
    "tags": [
      "math",
      "medium"
    ],
    "testCases": [
      {
        "input": "n = 3",
        "expectedOutput": "5",
        "isHidden": false
      },
      {
        "input": "n = 1",
        "expectedOutput": "1",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "5",
        "explanation": ""
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": ""
      }
    ],
    "solution": "Apply mathematical concepts and look for patterns or formulas that can simplify the solution.",
    "hints": [
      "Look for mathematical patterns or formulas",
      "Consider edge cases and boundary conditions"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "1 <= n <= 19"
  },
  {
    "title": "97. Interleaving String",
    "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\\n\\ns = s1 + s2 + ... + sn\\nt = t1 + t2 + ... + tm\\n|n - m| <= 1\\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\n\\nNote: a + b is the concatenation of strings a and b.\\n \\nExample 1:\\n\\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\\nOutput: true\\nExplanation: One way to obtain s3 is:\\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\\nSince s3 can be obtained by interleaving s1 and s2, we return true.\\n\\nExample 2:\\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\\nOutput: false\\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\\n\\nExample 3:\\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\\nOutput: true\\n\\n \\nConstraints:\\n\\n0 <= s1.length, s2.length <= 100\\n0 <= s3.length <= 200\\ns1, s2, and s3 consist of lowercase English letters.\\n\\n \\nFollow up: Could you solve it using only O(s2.length) additional memory space?\\n",
    "difficulty": "medium",
    "topic": "string",
    "tags": [
      "string",
      "medium"
    ],
    "testCases": [
      {
        "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "s1 = \"\", s2 = \"\", s3 = \"\"",
        "expectedOutput": "true",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
        "output": "true",
        "explanation": "One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true."
      },
      {
        "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"",
        "output": "false",
        "explanation": "Notice how it is impossible to interleave s2 with any other string to obtain s3."
      },
      {
        "input": "s1 = \"\", s2 = \"\", s3 = \"\"",
        "output": "true",
        "explanation": ""
      }
    ],
    "solution": "Apply string processing methods and consider character frequency analysis.",
    "hints": [
      "Consider using string manipulation methods",
      "Think about character frequency counting"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "0 <= s1.length, s2.length <= 100\\n0 <= s3.length <= 200\\ns1, s2, and s3 consist of lowercase English letters."
  },
  {
    "title": "98. Validate Binary Search Tree",
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\\nA valid BST is defined as follows:\\n\\nThe left subtree of a node contains only nodes with keys less than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n \\nExample 1:\\n\\nInput: root = [2,1,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [5,1,4,null,null,3,6]\\nOutput: false\\nExplanation: The root node's value is 5 but its right child's value is 4.\\n\\n \\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "root = [2,1,3]",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "expectedOutput": "false",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "root = [2,1,3]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "false",
        "explanation": "The root node's value is 5 but its right child's value is 4."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1"
  },
  {
    "title": "99. Recover Binary Search Tree",
    "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\\n \\nExample 1:\\n\\nInput: root = [1,3,null,null,2]\\nOutput: [3,1,null,null,2]\\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\\n\\nExample 2:\\n\\nInput: root = [3,1,4,null,null,2]\\nOutput: [2,1,4,null,null,3]\\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\\n\\n \\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 1000].\\n-231 <= Node.val <= 231 - 1\\n\\n \\nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?",
    "difficulty": "medium",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "medium"
    ],
    "testCases": [
      {
        "input": "root = [1,3,null,null,2]",
        "expectedOutput": "[3,1,null,null,2]",
        "isHidden": false
      },
      {
        "input": "root = [3,1,4,null,null,2]",
        "expectedOutput": "[2,1,4,null,null,3]",
        "isHidden": false
      }
    ],
    "examples": [
      {
        "input": "root = [1,3,null,null,2]",
        "output": "[3,1,null,null,2]",
        "explanation": "3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."
      },
      {
        "input": "root = [3,1,4,null,null,2]",
        "output": "[2,1,4,null,null,3]",
        "explanation": "2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n log n)",
    "spaceComplexity": "O(n)",
    "constraints": "The number of nodes in the tree is in the range [2, 1000].\\n-231 <= Node.val <= 231 - 1"
  },
  {
    "title": "100. Same Tree",
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\\n \\nExample 1:\\n\\nInput: p = [1,2,3], q = [1,2,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: p = [1,2], q = [1,null,2]\\nOutput: false\\n\\nExample 3:\\n\\nInput: p = [1,2,1], q = [1,1,2]\\nOutput: false\\n\\n \\nConstraints:\\n\\nThe number of nodes in both trees is in the range [0, 100].\\n-104 <= Node.val <= 104\\n\\n",
    "difficulty": "easy",
    "topic": "data-structures",
    "tags": [
      "data structures",
      "easy"
    ],
    "testCases": [
      {
        "input": "p = [1,2,3], q = [1,2,3]",
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "input": "p = [1,2], q = [1,null,2]",
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "input": "p = [1,2,1], q = [1,1,2]",
        "expectedOutput": "false",
        "isHidden": true
      }
    ],
    "examples": [
      {
        "input": "p = [1,2,3], q = [1,2,3]",
        "output": "true",
        "explanation": ""
      },
      {
        "input": "p = [1,2], q = [1,null,2]",
        "output": "false",
        "explanation": ""
      },
      {
        "input": "p = [1,2,1], q = [1,1,2]",
        "output": "false",
        "explanation": ""
      }
    ],
    "solution": "Choose appropriate data structures like stacks, queues, or hash maps based on the problem requirements.",
    "hints": [
      "Consider which data structure would be most efficient",
      "Think about the time and space complexity trade-offs"
    ],
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(1)",
    "constraints": "The number of nodes in both trees is in the range [0, 100].\\n-104 <= Node.val <= 104"
  }
]